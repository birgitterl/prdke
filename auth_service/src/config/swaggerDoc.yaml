openapi: 3.0.1
info:
  title: moody Authentication Service
  description: This is the REST API documentation for the moody auth_service
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: users
    description: Everything about your Users
  - name: auth
    description: Authentication operations
paths:
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: fetch all existing moody users
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                          example: Hugo
        404:
          description: No users found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 404
                  msg:
                    type: string
                    example: No users found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 500
                  msg:
                    type: string
                    example: Internal Server Error
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 503
                  msg:
                    type: string
                    example: Service unavailable
    post:
      tags:
        - users
      summary: Register a new user
      description: a new user is created, persisted in the database and an access token is returned.
      requestBody:
        description: User object that will be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNWZhODFhMmQxNTY2NjEwMDNiMDg5OWYyIn0sImlhdCI6MTYwNDg1NTgwOSwiZXhwIjoxNjA1MjE1ODA5fQ.XUZZrYGuUxBk4WQis8VII4GGadFESHwg8Il994WPk04
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: User already exists - Please choose another username
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 500
                  msg:
                    type: string
                    example: Internal Server Error
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 503
                  msg:
                    type: string
                    example: Service unavailable
      x-codegen-request-body-name: body
    delete:
      tags:
        - users
      summary: Delete all registered users
      description: all existing users are deleted (for testing purpose only)
      responses:
        200:
          description: OK - All users removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    type: string
                    example: OK - All users removed
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 500
                  msg:
                    type: string
                    example: Internal Server Error
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 503
                  msg:
                    type: string
                    example: Service unavailable
  /auth:
    get:
      tags:
        - auth
      summary: Get user by token
      description: a token must be provided in the authentication header and the related user object is returned
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  username:
                    type: string
                    example: Julia
        401:
          description: Unautorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 401
                  msg:
                    type: string
                    example: Unauthorized - Token is not valid
        404:
          description: No user found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 404
                  msg:
                    type: string
                    example: Invalid Credentials
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 500
                  msg:
                    type: string
                    example: Internal Server Error
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 503
                  msg:
                    type: string
                    example: Service unavailable
      security:
        - authentication: []
    post:
      tags:
        - auth
      summary: Login/authenticate user
      description: username and passwords are matched against the existing users and upon successful login, a token is returned
      requestBody:
        description: User object that needs to be authenticated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNWZhODFhMmQxNTY2NjEwMDNiMDg5OWYyIn0sImlhdCI6MTYwNDg1NTgwOSwiZXhwIjoxNjA1MjE1ODA5fQ.XUZZrYGuUxBk4WQis8VII4GGadFESHwg8Il994WPk04
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 401
                  msg:
                    type: string
                    example: Unauthorized - Token is not valid
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 404
                  msg:
                    type: string
                    example: No user found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 500
                  msg:
                    type: string
                    example: Internal Server Error
      x-codegen-request-body-name: body
components:
  schemas:
    User:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
          example: Hugo
        password:
          type: string
          example: '123456'
  securitySchemes:
    authentication:
      type: apiKey
      name: Authorization
      in: header
