openapi: 3.0.1
info:
  title: moody Social Graph Service
  description: This is the REST API documentation for the moody social_graph_service
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: profile
    description: Everything about your profiles
  - name: followerRelation
    description: Follower Relationships between moody profiles
  - name: message
    description: Everything about the posted messages
paths:
  /profiles:
    post:
      tags:
        - profile
      summary: Create a new profile or update an existing one
      description: If the user (provided via the header) does not have a profile yet, a new profile will be created. Else the profile will be updated.
      requestBody:
        description: Profile object to be created or updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        201:
          description: Profile created / updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []
    get:
      tags:
        - profile
      summary: Get all profiles
      description: Fetching all exisiting profiles.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        404:
          description: No profiles found
          content: {}
        500:
          description: Internal server error
          content: {}
    delete:
      tags:
        - profile
      summary: Delete all registered profiles
      description: all existing profiles are deleted (for testing purpose only)
      responses:
        200:
          description: All profiles removed
          content: {}
        500:
          description: Internal server error
          content: {}
  /profiles/me:
    get:
      tags:
        - profile
      summary: Get my profile
      description: through the auth header, the user object will be submitted and the current user's profile will be returned
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: No profile found
          content: {}
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []
  /profiles/{username}:
    get:
      tags:
        - profile
      summary: Get profile by username
      description: If there is a profile for the username, this profile object will be returned
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: the username of a profile
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: No profile found
          content: {}
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []

  /follow:
    post:
      tags:
        - followerRelation
      summary: Create a new follow relationship between two profiles
      description: a relationship will be created betweent two existing moody profiles.
      requestBody:
        description: Profile I want to follow
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Sepp
        required: false
      responses:
        201:
          description: Follow relationship created
          content:
            application/json:
              schema:
                type: object
                example: { 'relationship': 'follows' }
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []

  /follow/{username}:
    get:
      tags:
        - followerRelation
      summary: Check follow relationship
      description: Check if a specific follow relationship between the current user and an other user exists
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: the username of a profile
      responses:
        200:
          description: true if relationship exists and false if not
          content:
            application/json:
              schema:
                type: boolean
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []
    delete:
      tags:
        - followerRelation
      summary: Delete an existing follow relationship between two profiles
      description: Delete an existing follow relationship between two profiles
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: the username of a profile
      responses:
        201:
          description: Follow relationship deleted
          content:
            application/json:
              schema:
                type: object
                example: { 'relationship': 'unfollows' }
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []
  /messages:
    post:
      tags:
        - message
      summary: Create a new message
      description: A new message is created and linked to a profile.
      requestBody:
        description: The message I want to send.
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: My personal message :)
                emoji:
                  type: string
                  example: 'ðŸ¤¢'
        required: true
      responses:
        201:
          description: Message created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []
    get:
      tags:
        - message
      summary: Get all messages
      description: Fetching all existing messages.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        404:
          description: No messages found
          content: {}
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []
    delete:
      tags:
        - message
      summary: Delete all messages
      description: all existing messages are deleted (for testing purpose only)
      responses:
        200:
          description: All messages removed
          content: {}
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []
  /messages/my:
    get:
      tags:
        - message
      summary: Get my messages
      description: through the auth header, the user object will be submitted and the last 30 messages of the user will be returned
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        404:
          description: No messages found
          content: {}
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []
  /messages/iFollow:
    get:
      tags:
        - message
      summary: Get messages from profiles I follow
      description: through the auth header, the user object will be submitted and the last 100 messages of profiles the user follows will be returned
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        404:
          description: No message found
          content: {}
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []

  /search/messages:
    get:
      tags:
        - search
      summary: Get messages from a specific search term
      description: Search for messages of my followed profiles given a specific search term (text)
      parameters:
        - name: text
          in: query
          required: true
          schema:
            type: string
            example: bla
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        404:
          description: No messages found
          content: {}
        500:
          description: Internal server error
          content: {}
      security:
        - authentication: []
components:
  schemas:
    Profile:
      required:
        - birthday
        - hometown
        - gender
      type: object
      properties:
        birthday:
          type: string
          format: date
        hometown:
          type: string
          example: Linz
        gender:
          type: string
          example: female
          enum:
            - male
            - female
            - transgender
        background:
          type: string
          example: none
        privacy:
          type: string
          example: public
          default: public
          enum:
            - private
            - public
        notifications:
          type: boolean
          example: false
          default: false
        username:
          type: string
          example: Hugo
    Message:
      required:
        - text
        - emoji
      type: object
      properties:
        text:
          type: string
          example: My first message
        emoji:
          type: string
          example: ðŸ¤¢
        author:
          type: string
          example: Sepp
        timestamp:
          type: string
          format: date-time
          example: Thu Dec 03 2020 13:23:42 GMT+0000 (Coordinated Universal Time)
  securitySchemes:
    authentication:
      type: apiKey
      name: Authorization
      in: header
